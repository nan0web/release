{"instruction":"How to install with pnpm?","output":"```bash\npnpm add @nan0web/release\n```\n","context":["h1:@nan0web/release","h2:Installation"],"input":"## Installation\n\n","tags":["@nan0web/release","Installation"],"proven":"assert-in-@nan0web/release"}
{"instruction":"How to install with npm?","output":"```bash\nnpm install @nan0web/release\n```\n","context":["h1:@nan0web/release","h2:Installation"],"input":"## Installation\n\n","tags":["@nan0web/release","Installation"],"proven":"assert-in-@nan0web/release"}
{"instruction":"How to install with yarn?","output":"```bash\nyarn add @nan0web/release\n```\n","context":["h1:@nan0web/release","h2:Installation"],"input":"## Installation\n\n","tags":["@nan0web/release","Installation"],"proven":"assert-in-@nan0web/release"}
{"instruction":"How to initialize a new release version?","output":"```bash\nrelease init v1.0.0\n```\n","context":["h1:@nan0web/release","h2:CLI Usage"],"input":"## CLI Usage\n\nStart by initializing a new release:\n\n","tags":["@nan0web/release","CLI Usage"],"proven":"assert-in-@nan0web/release"}
{"instruction":"How to show release information?","output":"```bash\nrelease show [--full]\n```\n","context":["h1:@nan0web/release","h2:CLI Usage"],"input":"## CLI Usage\n\nStart by initializing a new release:\n\nconst cli = new ReleaseCLI()\nShow release details:\n\n","tags":["@nan0web/release","CLI Usage"],"proven":"assert-in-@nan0web/release"}
{"instruction":"How to list all releases?","output":"```bash\nrelease list [--json]\n```\n","context":["h1:@nan0web/release","h2:CLI Usage"],"input":"## CLI Usage\n\nStart by initializing a new release:\n\nconst cli = new ReleaseCLI()\nShow release details:\n\nconst release = new Release({\nversion: \"v1.0.0\",\ncreatedAt: new Date(\"2025-08-20\")\n})\nconsole.info(release.version) // v1.0.0\nList all releases in the project:\n\n","tags":["@nan0web/release","CLI Usage"],"proven":"assert-in-@nan0web/release"}
{"instruction":"How to write a release chat message?","output":"```bash\nrelease chat write --user alice \"Issue with the build pipeline\"\n```\n","context":["h1:@nan0web/release","h2:CLI Usage"],"input":"## CLI Usage\n\nStart by initializing a new release:\n\nconst cli = new ReleaseCLI()\nShow release details:\n\nconst release = new Release({\nversion: \"v1.0.0\",\ncreatedAt: new Date(\"2025-08-20\")\n})\nconsole.info(release.version) // v1.0.0\nList all releases in the project:\n\nconst cli = new ReleaseCLI()\nAdd a chat message to the current release:\n\n","tags":["@nan0web/release","CLI Usage"],"proven":"assert-in-@nan0web/release"}
{"instruction":"How to host release UI?","output":"```bash\nrelease host [--webui] [--port 3000]\n```\n","context":["h1:@nan0web/release","h2:CLI Usage"],"input":"## CLI Usage\n\nStart by initializing a new release:\n\nconst cli = new ReleaseCLI()\nShow release details:\n\nconst release = new Release({\nversion: \"v1.0.0\",\ncreatedAt: new Date(\"2025-08-20\")\n})\nconsole.info(release.version) // v1.0.0\nList all releases in the project:\n\nconst cli = new ReleaseCLI()\nAdd a chat message to the current release:\n\nconst cli = new ReleaseCLI()\nHost a static server for viewing releases:\n\n","tags":["@nan0web/release","CLI Usage"],"proven":"assert-in-@nan0web/release"}
{"instruction":"How to serve release static assets?","output":"```bash\nrelease serve [--port 8080]\n```\n","context":["h1:@nan0web/release","h2:CLI Usage"],"input":"## CLI Usage\n\nStart by initializing a new release:\n\nconst cli = new ReleaseCLI()\nShow release details:\n\nconst release = new Release({\nversion: \"v1.0.0\",\ncreatedAt: new Date(\"2025-08-20\")\n})\nconsole.info(release.version) // v1.0.0\nList all releases in the project:\n\nconst cli = new ReleaseCLI()\nAdd a chat message to the current release:\n\nconst cli = new ReleaseCLI()\nHost a static server for viewing releases:\n\nconst cli = new ReleaseCLI()\nServe all release files for local inspection:\n\n","tags":["@nan0web/release","CLI Usage"],"proven":"assert-in-@nan0web/release"}
{"instruction":"How to validate release tasks?","output":"```bash\nrelease validate [--ignore-fail]\n```\n","context":["h1:@nan0web/release","h2:CLI Usage"],"input":"## CLI Usage\n\nStart by initializing a new release:\n\nconst cli = new ReleaseCLI()\nShow release details:\n\nconst release = new Release({\nversion: \"v1.0.0\",\ncreatedAt: new Date(\"2025-08-20\")\n})\nconsole.info(release.version) // v1.0.0\nList all releases in the project:\n\nconst cli = new ReleaseCLI()\nAdd a chat message to the current release:\n\nconst cli = new ReleaseCLI()\nHost a static server for viewing releases:\n\nconst cli = new ReleaseCLI()\nServe all release files for local inspection:\n\nconst cli = new ReleaseCLI()\nValidate release tasks and integrity:\n\n","tags":["@nan0web/release","CLI Usage"],"proven":"assert-in-@nan0web/release"}
{"instruction":"How to seal a release?","output":"```bash\nrelease seal [--message \"All core APIs are stable and tested\"]\n```\n","context":["h1:@nan0web/release","h2:CLI Usage"],"input":"## CLI Usage\n\nStart by initializing a new release:\n\nconst cli = new ReleaseCLI()\nShow release details:\n\nconst release = new Release({\nversion: \"v1.0.0\",\ncreatedAt: new Date(\"2025-08-20\")\n})\nconsole.info(release.version) // v1.0.0\nList all releases in the project:\n\nconst cli = new ReleaseCLI()\nAdd a chat message to the current release:\n\nconst cli = new ReleaseCLI()\nHost a static server for viewing releases:\n\nconst cli = new ReleaseCLI()\nServe all release files for local inspection:\n\nconst cli = new ReleaseCLI()\nValidate release tasks and integrity:\n\nconst release = new Release({\nversion: \"v1.0.0\",\ncreatedAt: new Date(\"2025-08-20\")\n})\nSeal the release with retro reflection:\n\n","tags":["@nan0web/release","CLI Usage"],"proven":"assert-in-@nan0web/release"}
{"instruction":"How to instantiate a Release?","output":"```js\nimport { Release } from '@nan0web/release'\nconst release = new Release({\n\tversion: \"v1.0.0\",\n\tcreatedAt: \"2025-08-20T10:00:00Z\"\n})\nconsole.info(release.version) // ← v1.0.0\nconsole.info(release.createdAt instanceof Date) // ← true\n\n```\n","context":["h1:@nan0web/release","h2:Core Concepts","h3:1. Release as Object"],"input":"### 1. Release as Object\n\nA `Release` is a structured class containing:\n\n- `version`: release identifier (vX.Y.Z).\n- `createdAt`, `startAt`, `planAt`, `completeAt`: datetime milestones.\n- `document`: parsed markdown document with structure-aware parsing.\n\nEach property is typed and validated automatically via JSDoc and runtime parsing.\n\n","tags":["@nan0web/release","Core Concepts","1. Release as Object"],"proven":"assert-in-@nan0web/release"}
{"instruction":"How to parse release notes markdown into structured data?","output":"```js\nimport { ReleaseDocument } from '@nan0web/release'\nconst md = `# v1.0.0 - 2025-08-20\n\n## Overview\nRelease milestone includes UI polish and core API stabilization.\n\n### Tasks\n### Done **Implement core UI design** [ui.core-design]\n### InProgress **Fix responsive issues in mobile layout** [ui.mobile-fixes]`\n\nconst doc = ReleaseDocument.from(md)\nconsole.info(doc.version) // ← v1.0.0\nconsole.info(doc.date instanceof Date) // ← true\nconsole.info(doc.document.children instanceof Array) // ← true\n\n```\n","context":["h1:@nan0web/release","h2:Core Concepts","h3:2. Release Document Parsing"],"input":"### 2. Release Document Parsing\n\nA `ReleaseDocument` extends `@nan0web/markdown` with:\n\n- Structured parsing of markdown release notes\n- Extraction of sections and tasks\n- Team and role parsing from markdown frontmatter or code\n\n","tags":["@nan0web/release","Core Concepts","2. Release Document Parsing"],"proven":"assert-in-@nan0web/release"}
{"instruction":"How to create a Person with typed properties?","output":"```js\nimport { Person } from '@nan0web/release'\nconst person = new Person({\n\tname: [\"Alice\", \"Developer\"],\n\tgender: \"female\",\n\tcontacts: [\"mailto:alice@example.com\"]\n})\nconsole.info(person.name.firstName) // ← Alice\nconsole.info(person.contacts.length >= 0) // ← true\n\n```\n","context":["h1:@nan0web/release","h2:Core Concepts","h3:3. Person & Team Structures"],"input":"### 3. Person & Team Structures\n\nA `Person` instance includes:\n\n- `name`: HumanName\n- `gender`: HumanGender\n- `contacts`: array of HumanContact\n\n","tags":["@nan0web/release","Core Concepts","3. Person & Team Structures"],"proven":"assert-in-@nan0web/release"}
{"instruction":"How to register and validate tasks as tests?","output":"```js\nimport { ProjectManagement } from '@nan0web/release'\nconst pm = new ProjectManagement()\npm.registerTask(\"task-1\", \"./tests/task1.test.js\")\npm.registerTask(\"task-2\", \"./tests/task2.test.js\")\n\nconst mockResults = {\n\tpassed: [\"task-1\"],\n\tfailed: [],\n\tpending: [\"task-2\"]\n}\n\npm.validateProjectState = async () => mockResults\nconst results = await pm.validateProjectState()\n\nconsole.info(results.passed.includes(\"task-1\")) // ← true\nconsole.info(results.pending.includes(\"task-2\")) // ← true\n\n```\n","context":["h1:@nan0web/release","h2:Architecture: Project Management as Code","h3:Task Management"],"input":"### Task Management\n\nTasks are registered as `taskId` → `testFilePath` in `ProjectManagement`.\nTheir status is derived by running `node:test` suites.\n\n","tags":["@nan0web/release","Architecture: Project Management as Code","Task Management"],"proven":"assert-in-@nan0web/release"}
{"instruction":"How to execute a release after validation?","output":"```js\nimport { ReleaseManager, ProjectManagement } from '@nan0web/release'\nconst pm = new ProjectManagement()\nconst rm = new ReleaseManager(pm)\n\nrm.calculateVersion = () => \"v1.0.1\"\nrm.publish = async () => true\n\nconst result = await rm.executeRelease(\"patch\")\nconsole.info(result.version) // ← v1.0.1\nconsole.info(result.published) // ← true\n\n```\n","context":["h1:@nan0web/release","h2:Architecture: Project Management as Code","h3:Release Processing"],"input":"### Release Processing\n\nThe `ReleaseManager` coordinates releases and validates readiness.\nIt ensures:\n\n- All registered tests pass\n- Version is correctly incremented\n- Git tag is applied if all validations succeed\n\n","tags":["@nan0web/release","Architecture: Project Management as Code","Release Processing"],"proven":"assert-in-@nan0web/release"}
{"instruction":"How to parse changelog and extract tasks?","output":"```js\nimport { ChangelogTaskManager } from '@nan0web/release'\nconst ctm = new ChangelogTaskManager()\nconst changelog = `# Changelog\n\n## [1.0.0] - 2025-08-20\n### Added\n- Initial structure [core.init]\n- Release notes support [docs.release-notes]`\n\nconst tasks = ctm.parseChangelog(changelog)\nconsole.info(Array.isArray(tasks)) // ← true\nconsole.info(tasks.length >= 0) // ← true\n\n```\n","context":["h1:@nan0web/release","h2:Architecture: Project Management as Code","h3:Changelog Integration"],"input":"### Changelog Integration\n\nUsing `ChangelogTaskManager`, you can:\n\n- Extract task definitions from changelog entries\n- Generate corresponding test files\n- Automate task progression in CI\n\n","tags":["@nan0web/release","Architecture: Project Management as Code","Changelog Integration"],"proven":"assert-in-@nan0web/release"}
{"instruction":"How to run playground demo?","output":"```bash\ngit clone https://github.com/nan0web/release.git\ncd release\npnpm install\npnpm run playground\n```\n","context":["h1:@nan0web/release","h2:CLI Playground"],"input":"## CLI Playground\n\nTry the package in the terminal:\n\n","tags":["@nan0web/release","CLI Playground"],"proven":"assert-in-@nan0web/release"}
{"instruction":"How to check project status before publishing?","output":"```bash\nnpm test\nnpm run test:coverage\nnpm run test:status\n```\n","context":["h1:@nan0web/release","h2:Project Status"],"input":"## Project Status\n\nTo verify the project is ready, run:\n\n","tags":["@nan0web/release","Project Status"],"proven":"assert-in-@nan0web/release"}