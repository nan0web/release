import SubCommand from "./SubCommand.js"
import AppCommandMessage from "../co/AppCommandMessage.js"
import { CommandError } from "@nan0web/co"

/**
 * InitCommand – scaffolds a new release directory with the minimal set of
 * files required for a functional release (release.js, release.md and a
 * placeholder task folder).  The command is deliberately tiny – it only
 * creates the filesystem layout and writes a tiny starter release object.
 *
 * Usage:
 *   release init v1.0.0
 */
class InitCommand extends SubCommand {
	constructor(options = {}) {
		super(options)
		this.addArgument("*", String, "", "Version for the new release")
	}

	/**
	 * Run the init process.
	 *
	 * @param {AppCommandMessage} msg – command context (contains parsed options)
	 */
	async run(msg) {
		if (!this.db) {
			throw new CommandError("Database (working directory) not set")
		}
		const version = msg.args[0]
		if (!version) {
			throw new CommandError("Version not defined", msg)
		}
		const db = this.db.extractVersion(version)

		const files = [
			["release.js", [
				'import Release from "../../../src/Release.js"',
				'export default new Release({',
				`	version: "${version}",`,
				'	createdAt: new Date(),',
				'	tasks: new Map()',
				'})',
			].join("\n")],
			["release.md", [
				`# ${version} - ${new Date().toISOString().split("T")[0]}`,
				'## Overview',
				'Initial release scaffold generated by `nan0release init`.',
			].join("\n\n")]
		]

		for (const [file, content] of files) {
			const jsExists = await db.loadDocument(file)
			if (jsExists) {
				this.logger.warn(file, "exists already")
			} else {
				await db.saveDocument(file, content)
				this.logger.success(file, "created")
			}
		}

		this.logger.success(`Release ${version} created`)
	}
}

export default InitCommand
